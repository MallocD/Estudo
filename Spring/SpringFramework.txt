\\\\\\\Core e Beans//////

*Estrutura --> Partes fundamentais

*IoC--> Inversão de Controles-->É um príncipio de design de programas de computadores onde a sequência(controle) de chamadas dos métodos
é invertida em relação ao que foi programado, ou seja, ela não é determinada pelo programador. O Spring é quem vai determinar o que 
será executado primeiro, qual classe será executada primeiro e etc.

*Injeção de Dependências--> 

*BeanFactory--> Implementação, fornece uma maneira de criar uma factory em tempo de execução.

\\\Context///

*Core e Beans=> Herda

*Internacionalização=> A partir de menssagens, criação de arquivos

*ApplcationContext=> Versão melhorada da BeanFactory


\\\Expression Language///

-> Define nossos objetos em uma configuração (xml) em tempo de execução, valores e comportamentos e de bens e passa para o Spring


\\\\\\Spring Bean/////
 
*É qualquer classe que é gerenciada pelo Ioc(Controller)

Steryotypes : São permitidos somente em classes, sendo impossível de utiliza-las em métodos
Anotações Spring Bean

@Repository : Direto com o banco de dados só pode ser usado em classes/Persistência;Não permitidos em métodos

@Service: Regras de negócios em classes, parte pesada do programa, parte lógica;Não permitidos em métodos, somente em classes

@Controller: Controla quem chama alguma coisa e de que maneira será aplicado
/@RestController: Retorna dados em JSON 

@Configuration: Configuração básica de uma bean/personalizada

@Component: Simples sem nem um quisito

////////////////////////////////////////////////////////////////
@Contoller - Utilizada para a camada de apresentação. Normalmente anotamos classes que representam a interação do usuário, 
como managed beans, actions e controllers;

@Service - Utilizada para a camada de aplicação e negócio. Comumente usada para anotar classes que denotam serviços
de aplicação e de regras de negócio;

@Repository - Utilizada para a camada de persistência. Normalmente anotamos classes que representam um DAO, Repositório etc;

@Component - Utilizada para classes que não se encaixam em nenhuma das anotações acima. É comum anotar classes utils, parsers, helpers,
processadores de arquivo etc;
////////////////////////////////////////////////////////////////////

\\\\\Spring Scopes///////
@Bean
@Scope("Singleton")
*Singleton : Passa o mesmo valor para todas as instancias feitas a partir da classe

*Prototype: Irá passar um valor para cada instancia, independentes.
@Scope("Prototype")

*Request: Toda vez que o valor for retornado ao usuário a instancia vai ser destruída, assim se perdendo na memória e gerando uma nova instancia
@RequestScope

*Session : Quase igual ao Request, porém ao contrário dele, ao invés do valor ser distrúido e gerado quando houvesse um refresh, o valor será distruido somente
após o usuário fechar a página
@SessionScope

*Application : Igual ao Session, porém distribuida para diversas aplicações
@Scope(value = WebApplicationContext.SCOPE_SESSION, proxyMode = ScopedProxyMode.TARGET_CLASS)

*WeBSocket: Como o request, porém sem que precise haver um refresh, atualiza e destroi uma instancia automaticamente
@Scope(value = "websocket", proxyMode = ScopedProxyMode.TARGET_CLASS)


\\Injenção de dependencia//
É uma forma de aplicar inversão de controle em uma classe que utiliza funcionalidades de outras classes.

Proxies Setter: Como procura e seta as dependências

Autowired

*Propriedades : é a injeção direta de dependencias
*Construtor: Preferível para realizar testes de software, pelo fato de passar o contrutor e injetar a dependencia
*Métodos: Colocar mais regras de negócio, passar mais códigos dentro do métodos, mais executáveis 

\\Suporte a CDI//

O CDI é a especificação Java que define a injeção de depêndencia a inversão de controle para aplicações JavaEE.
@Named

Spring deve ser criado com o maven, porém é com mais passos, ja o Spring Inititializr, que adiciona todas as dependencias que você deseja automaticamente



