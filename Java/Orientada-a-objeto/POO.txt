Vantagens-->
COMERNada

Confiável : O isolamento entre as partes gera um software seguro.Ao alterar uma parte,
nehuma outra é afetada.(Mexer na pilha de um controle remoto não altera o controle remoto)

Oportuno : Ao dividir tudo em partes, várias delas podem ser desenvolvidas em paralelo.
(Deselvover o LCD, botão, pilha, carcaça e etc, sem precisar desenvolver um de cada vez(separadamente)

Manutenível : Atualizar um software é mais fácil. Uma pequena modificação vai benificiar todas as partes que usarem o objeto.
(Atualizar por exemplo a pilha , comprando uma que seja recarregável, assim irá benificiar todas as partes do objeto.)

Extensível: O software não é estático. Ele deve crescer para permanecer útil.
(Aumentar as funcionalidades do objeto para que ele continue a ser útil)

Reutilizável : Podemos utilizar objetos de um sistema que criamos em outro sistema futuro. 
(Reutilizar códigos POO em um outro sistema.)

Natural : Mais fácil de entender. Você se preocupa mais na funcionalidade do que nos detalhes de implementação.

Definição de objeto :
Coisa material ou abstrata que pode ser percebeida pelos sentidos e descrita por meio das suas características, comportamentos e estado atual.


Todo objeto vem de uma classe(Um Molde/Modelo):

Classe = Modelo que será destinado para criação ou não de objetos
Atributos = Caractrísticas do objeto instanciado
Métodos = Comportamentos que o objeto pode realizar
Estado =  Estado atual do objeto

Pessoa = Classe
Cor da pele = Atributo
Joao = Objeto
vouCaminhar = Método
Cor da pele = branco = Estado.



Coisas que eu tenho -> Características -> Atributos

Modelo
Cor
Ponta
Carga
Tampada

Coisas que eu faço - > Comportamentos - > Métodos

Escrever
Rabiscar
Tampar
Pintar
Destampar


Como estou agora-> Estado atual -> Estado

Destampada
Carga 90
Cor azul
ponta 07

Quando gero um objeto a partir de uma classe = Instanciamento


c1 = nova Caneta=> Caneta c1 = new Caneta();//Nesse caso gerei o objeto c1 a partir da classe Caneta;
c1.cor = "Azul" //Mudando o valor do atributo a partir do obejto gerado pelo instanciamento//Atributo
c1.ponta = "2" // Atributo
c1.rabiscar() //Chamando o método a partir do objeto gerado.//Chamada de objeto


Classes e Objetos são quase irmãs

Classe => Define atributos e métodos comuns que serão compartilhados por um objeto.

Abstração = > Abistrair alguns atributos que não seram úteis ao objeto na programação


Linguagem de Modelagem Unificada => UML

Diagrama de classes :
Toda classe será representada como um retangulo
*Cabeçalho: Nome da classe
*Miolho : Atributos(Ex: cor)
*Rodapé : Métodos (Ex: pintar())

Modificadores de visibilidade

*Indicam o nível de acesso aos componentes internos de uma classe :

// + público ou public // Qualquer um pode utilizar(orelhão)
: A classe atual e todas as outras classes teram acesso.

// - privado ou private // Somente uma pessoa pode utilizar(seu celular)
: somente a classe atual terá acesso

// # protegido ou protected // Só quem é da família(Telefone da minha casa)
:a classe atual e todas as suas sub-classes

Um exemplo, você vai ao mercado(public classe) na hora de pagar tem que dar o dinheiro para o atendente(public metodo), você não tem acesso ao caixa
(private atributo) só o atendente pois ele é do mercado(classe public)

------------------------------
Métodos Especiais

Metódos Acessores :

////
Getters

Criação de uma classe Estante

Estante e = new Estante();//Instanciamento da classe tornando a em um objeto

t= e.totDoc;// A variável irá receber o valor do atributo do objeto e;



t = e.getTotDoc(); //A Váriavel t está recendo  a chamada do objeto ao metódo getTotDoc()

Métodos Modificadores :

////
Setters

Estante e = new Estante();//Instanciamento da classe tornando a em um objeto

e.totDoc = e.totDoc + 1;// Atributo totDoc irá receber mais um

e.setTotDoc(doc); //Normalmente é necessário o parâmetro que será setado ao método


Método Construtor :

////
Construct

Os valores de atributos e métodos são setados automaticamentes
Metodo construtor(m: caractére,c: caractére, p: Real){
setModel(m)
setCor(c)
setPonta(p)
}
Caneta c1 = new Caneta("Bic","Preta", "0.7")//Setar valores aos atributos do objeto no momento de sua criação, passando os parâmetros e utilando o Método contrutor;




